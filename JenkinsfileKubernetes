pipeline {
    agent any

    environment {
        IMAGE_NAME = 'cprathap/spring-boot-mongo'
        VERSION = "v1.0.${BUILD_NUMBER}"
        DOCKER_IMAGE = "${IMAGE_NAME}:${VERSION}"
        LATEST_IMAGE = "${IMAGE_NAME}:latest"
        K8S_DEPLOYMENT = 'spring-boot-app'
        K8S_NAMESPACE = 'default'
        // ‚ùå Removed KUBECONFIG=/root/.kube/config
    }

    tools {
        maven 'Maven-3.8.7'
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
    }

    stages {
        stage('Clone Repository') {
            steps {
                git credentialsId: 'GIT_CREDENTIALS',
                    url: 'https://github.com/prathapchitra/spring-boot-mongo-docker.git',
                    branch: 'master'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('Sonar') {
                    sh '''
                        mvn clean verify sonar:sonar \
                          -Dsonar.projectKey=spring-boot-mongo \
                          -Dsonar.projectName=spring-boot-mongo \
                          -Dsonar.projectVersion=$VERSION \
                          -Dsonar.java.binaries=target
                    '''
                }
            }
        }

        stage('Wait for SonarQube Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Application') {
            steps {
                sh 'mvn package'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_IMAGE} -t ${LATEST_IMAGE} ."
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'DOCKER_HUB_PASSWORD',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push ${DOCKER_IMAGE}
                        docker push ${LATEST_IMAGE}
                        docker logout
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG_FILE', variable: 'KUBECONFIG')]) {
                    sh "sed -i 's|image: .*|image: ${DOCKER_IMAGE}|' springBootMongo.yml"
                    sh "kubectl apply -f springBootMongo.yml --validate=false"
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG_FILE', variable: 'KUBECONFIG')]) {
                    sh "kubectl get pods -n ${K8S_NAMESPACE}"
                }
            }
        }
    }
}
