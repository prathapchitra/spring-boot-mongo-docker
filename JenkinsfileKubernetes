pipeline {
    agent any

    environment {
        IMAGE_NAME = 'cprathap/spring-boot-mongo'
        VERSION = "v1.0.${BUILD_NUMBER}"
        DOCKER_IMAGE = "${IMAGE_NAME}:${VERSION}"
        LATEST_IMAGE = "${IMAGE_NAME}:latest"
        K8S_DEPLOYMENT = 'spring-boot-app'     // adjust if your app name differs
        K8S_NAMESPACE = 'default'
    }

    tools {
        maven 'Maven-3.8.7'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git credentialsId: 'GIT_CREDENTIALS', url: 'https://github.com/prathapchitra/spring-boot-mongo-docker.git', branch: 'master'
            }
        }

        stage('Build Application') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE} -t ${LATEST_IMAGE} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            docker push ${DOCKER_IMAGE}
                            docker push ${LATEST_IMAGE}
                            docker logout
                        '''
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Replace image in deployment YAML with the Docker image
                    sh "sed -i 's|image: .*|image: ${DOCKER_IMAGE}|' springBootMongo.yml"

                    // Apply the Kubernetes manifest using the new image
                    sh "kubectl apply -f springBootMongo.yml"
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                sh "kubectl get pods -n ${K8S_NAMESPACE}"
            }
        }
    }
}
